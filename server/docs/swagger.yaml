openapi: 3.0.0
info:
  description: |
    This is a simple chat app that users can join available room then able to make chat with other users in the same rooms.
  version: "1.0.0"
  title: Simple Room Chat
  contact:
    email: dimas.yudhana@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/dimasyudhana/simple-chat/1.0.0
tags:
    - name: authentication
      description: User Authentication
    - name: users
      description: Endpoints for user management
    - name: rooms
      description: Endpoints for room management
    - name: members
      description: Endpoints for member management
    - name: messages
      description: Endpoints for message management

paths:
  /register:
    post:
      tags:
        - authentication
      summary: Register a new user to sytem
      description: Endpoint create a new user to the web-application
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/users"
            example:
              username: "peterzalai"
              phone: "+6281235288543"
              email: "peterzalai@gmail.com"
              password: "@Secret123"
      responses:
        '201':
          $ref: '#/components/responses/Response201CreateUser'
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'
      security:
        - bearerAuth: []

  /login:
    post:
      tags:
        - authentication
      summary: Login to system
      description: Endpoint login user to the web-application
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users'
            examples:
              example1:
                summary: Example login user id 1
                value:
                  email: "admin@gmail.com"
                  password: "@Secret123"
              example2:
                summary: Example login user id 2
                value:
                  email: "peterzalai@gmail.com"
                  password: "@Secret123"
      responses:
        '200':
          $ref: '#/components/responses/Response200Login'
        '400':
          $ref: '#/components/responses/Response400Login'
        '500':
          $ref: '#/components/responses/Response500'

  /users/{user_id}:
    get:
      tags:
        - users
      summary: Get user profile
      description: Get user information by their ID
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Response200GetUserProfile'
        '404':
          $ref: '#/components/responses/Response404'
        '500':
          $ref: '#/components/responses/Response500'
      security:
        - bearerAuth : []

    put:
      tags:
        - users
      summary: Update user profile
      description: Update user information by their ID, admin also have authority
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                old_password:
                  type: string
                new_password:
                  type: string
                confirm_password:
                  type: string
                status:
                  type: boolean
                  example: true
                image:
                  type: string
      responses:
        '200':
          $ref: '#/components/responses/Response200UserUpdate'
        '400':
          $ref: '#/components/responses/Response400'
        '404':
          $ref: '#/components/responses/Response404'
        '500':
          $ref: '#/components/responses/Response500'
      security:
        - bearerAuth : []

    delete:
      tags:
        - users
      summary: Deactive user profile
      description: Deactive user information by their ID
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Response200UserDelete'
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'
      security:
        - bearerAuth: []

  /rooms:
    post:
      tags:
        - rooms
      summary: Register new room
      description: Endpoint register new room to the web-application
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/rooms"
            example:
              room_name: "Concurrency"
      responses:
        '201':
          $ref: '#/components/responses/Response201CreateRoom'
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'
      security:
        - bearerAuth: []

    get:
      tags:
        - rooms
      summary: Get list rooms
      description: Get list rooms
      responses:
        '200':
          $ref: '#/components/responses/Response200GetListRooms'
        '404':
          $ref: '#/components/responses/Response404'
        '500':
          $ref: '#/components/responses/Response500'
      security:
        - bearerAuth : []

  /rooms/{room_id}:
    get:
      tags:
        - rooms
      summary: Get room by room_id
      description: Get specific room by room_id
      parameters:
        - name: room_id
          in: path
          description: Room ID
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Response200GetRoom'
        '404':
          $ref: '#/components/responses/Response404'
        '500':
          $ref: '#/components/responses/Response500'
      security:
        - bearerAuth : []

    put:
      tags:
        - rooms
      summary: Update room by room_id
      description: Update specific room by room_id
      parameters:
        - name: room_id
          in: path
          description: Room ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Decode-Encode
      responses:
        '200':
          $ref: '#/components/responses/Response200RoomUpdate'
        '400':
          $ref: '#/components/responses/Response400'
        '404':
          $ref: '#/components/responses/Response404'
        '500':
          $ref: '#/components/responses/Response500'
      security:
        - bearerAuth : []

    delete:
      tags:
        - rooms
      summary: Deactive room by room_id
      description: Deactive specific room by room_id
      parameters:
        - name: room_id
          in: path
          description: Room ID
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Response200DeactiveRoom'
        '404':
          $ref: '#/components/responses/Response404'
        '500':
          $ref: '#/components/responses/Response500'
      security:
        - bearerAuth: []

  /rooms/{room_id}/members:
    get:
      tags:
        - rooms
      summary: read messages
      description: read messages from other users in the same room
      parameters:
        - name: room_id
          in: path
          description: Room ID
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Response200GetListMembers'
        '404':
          $ref: '#/components/responses/Response404'
        '500':
          $ref: '#/components/responses/Response500'
      security:
        - bearerAuth : []

  /ws/domain/rooms/{room_id}:
    post:
      tags:
        - messages
      summary: Write messages through websocket protocol
      description: write messages from other users in the same room
      parameters:
        - name: room_id
          in: path
          description: Room ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          text:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        '201':
          $ref: '#/components/responses/Response201CreateFeedback'
        '400':
          $ref: '#/components/responses/Response400'
        '404':
          $ref: '#/components/responses/Response404'
        '500':
          $ref: '#/components/responses/Response500'
      security:
        - bearerAuth: []

    get:
      tags:
        - messages
      summary: Read messages through websocket protocol
      description: read messages from other users in the same room
      parameters:
        - name: room_id
          in: path
          description: Room ID
          required: true
          schema:
            type: string
      responses:
        '201':
          $ref: '#/components/responses/Response200Messages'
        '400':
          $ref: '#/components/responses/Response400'
        '404':
          $ref: '#/components/responses/Response404'
        '500':
          $ref: '#/components/responses/Response500'
      security:
        - bearerAuth: []

components: 
  securitySchemes:
    bearerAuth:           
      type: http
      scheme: bearer
      bearerFormat: JWT

  requestBodies:

    RequestLoginUser:
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/users' 

  responses:
    Response200:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 200
              message:
                type: string
                example: "Successful operation"
    
    Response201:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 201
              message:
                type: string
                example: "Successful operation"
    
    Response201CreateUser:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              message:
                type: string
            example: 
              code: 200
              message: "Successful created an account"
              data:
                user_id: "6e03f45c-010a-11ee-8036-e8fb1c216033"

    Response201CreateRoom:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              message:
                type: string
            example: 
              code: 200
              message: "Successful created new class"
              data:
                room_id: "e487d1eb-1b94-4a1a-b88a-3c21123f888a"

    Response201CreateMentee:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              message:
                type: string
            example: 
              code: 200
              message: "Successful register new mentee"
              data:
                mentee_id: "123e4567-e89b-12d3-a456-426614174000"
                fullname: "frans do'o"
                nickname: "frans"
                email: "frans@example.com"
                phone: "+6281235288543"
                telegram: "@fransdoo"
                gender: "M"

    Response201CreateFeedback:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              message:
                type: string
            example: 
              code: 200
              message: "Successful add feedback"
              data:
                content: "test user 1"
                room_id: "123e4567-e89b-12d3-a456-426614174000"
                username: "Jerry"

    Response200Login:
      description: Successful login
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              message:
                type: string
              token:
                type: string
            example: 
              code: 200
              message: "Successful login"
              data:
                user_id: "6e03f45c-010a-11ee-8036-e8fb1c216033"
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InBldGVyemFsYWlAZ21haWwuY29tIiwicGFzc3dvcmQiOiJAU2VjcmV0MTIzIn0.BZq48TAx5wci2LH48KW5geslrGR2ybr0-5Wol-HyDkI"
          examples:
            Example login user id 1:
              value:
                code: 200
                message: "Successful login"
                data:
                  user_id: "6e03f45c-010a-11ee-8036-e8fb1c216033"
                  token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InBldGVyemFsYWlAZ21haWwuY29tIiwicGFzc3dvcmQiOiJAU2VjcmV0MTIzIn0.BZq48TAx5wci2LH48KW5geslrGR2ybr0-5Wol-HyDkI"
            Example login user id 2:
              value:
                code: 200
                message: "Successful login"
                data:
                  user_id: "6e03f45c-010a-22ff-8036-e8fb1c2160gg"
                  token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InBldGVyemFsYWlAZ21haWwuY29tIiwicGFzc3dvcmQiOiJAU2VjcmV0MTIzIn0.BZq48TAx5wci2LH48KW5geslrGR2ybr0-5Wol-HyDkI"

    Response200GetUserProfile:    
      description: Success get spesific user data
      content:
        application/json:
          example:
              code: 200
              message: "Successful Operation"
              data:
                user_id: "6e03f45c-010a-11ee-8036-e8fb1c216033"
                username: "admin"
                email: "admin@gmail.com"
                image: "admin.png"
                created_at: "2023/03/07"
                updated_at: "2023/04/07"

    Response200GetListRooms:    
      description: Success get rooms data
      content:
        application/json:
          example:
            code: 200
            message: "Successful Operation"
            data:
              - room_id: "e487d1eb-1b94-4a1a-b88a-3c21123f888a"
                name: "Concurency"
              - room_id: "e487d1eb-1b94-4a1a-b88a-3c21123f888b"
                name: "Node JS"
              - room_id: "e487d1eb-1b94-4a1a-b88a-3c21123f888c"
                name: "Encode-Decode"

    Response200GetRoom:    
      description: Success get specific room data
      content:
        application/json:
          example:
            code: 200
            message: "Successful Operation"
            data:
              room_id: "e487d1eb-1b94-4a1a-b88a-3c21123f888a"
              room_name: "Concurency"

    Response200GetListMembers:    
      description: Success get member data
      content:
        application/json:
          example:
            code: 200
            message: "Successful Operation"
            data:
              room_id: "e487d1eb-1b94-4a1a-b88a-3c21123f888a"
              room_name: "Concurency"
              members:
              - member_id: "e487d1eb-1b94-4a1a-b88a-3c21123f888a"
                username: "user 1"
              - member_id: "e487d1eb-1b94-4a1a-b88a-3c21123f888b"
                username: "user 2"
              - member_id: "e487d1eb-1b94-4a1a-b88a-3c21123f888c"
                username: "user 3"

    Response200Messages:    
      description: Success get mentee data
      content:
        application/json:
          example:
            code: 200
            message: "Successful Operation"
            data:
              content: "test user 1"
              room_id: "123e4567-e89b-12d3-a456-426614174000"
              username: "Jerry"

    Response200UserUpdate:
      description: User information updated successfully
      content:
        application/json:
          examples:
            example update 1:
              summary: Example update user id 1
              value:
                code: 200
                message: "Successful Operation"
                data:
                  username: "admin"
                  email: "admin@gmail.com"
                  image: "admin.png"
                  status: active
                  created_at: "2023/03/07"
                  updated_at: "2023/04/07"
            example update 2:
              summary: Example update password with user id 2 
              value:
                code: 200
                message: "Successful Operation"

    Response200UserDelete:
      description: User data deleted successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 200
              message:
                type: string
                example: "Success Deactive an Account"

    Response200RoomUpdate:
      description: Room information updated successfully
      content:
        application/json:
          example:
            code: 200
            message: "Successful Operation"
            data:
              room_id: "e487d1eb-1b94-4a1a-b88a-3c21123f888a"
              name: "Decode-Encode"
    
    Response200DeactiveRoom:
      description: Room data deleted successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 200
              message:
                type: string
                example: "Success Deactive Room"

    Response400Login:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 400
              message:
                type: string
                example: "Bad request, Incorrect email or password"

    Response400:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 400
              message:
                type: string
                example: "Bad request"

    Response401Unauthorized:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 401
              message:
                type: string
                example: "Unauthorized access."

    Response404:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 404
              message:
                type: string
                example: "The requested resource was not found"

    Response500:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 500
              message:
                type: string
                example: "Internal server error"

  schemas:
    users:
      type: object 
      properties: 
        user_id: 
          type: string
          format: uuid 
        username: 
          type: string  
        phone: 
          type: string
        email: 
          type: string
          format: email
        password: 
          type: string
        image: 
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        is_deleted:
          type: boolean

    rooms:
      type: object
      properties:
        room_id:
          type: string
          format: uuid
        room_name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time

    members:
      type: object
      properties:
        member_id:
          type: string
          format: uuid
        room_id:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time

    messages:
      type: object
      properties:
        message_id:
          type: string
          format: uuid
        room_id:
          type: string
        message:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time